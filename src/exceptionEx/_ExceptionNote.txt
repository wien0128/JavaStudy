예외 처리의 필요성
1. 예외 처리가 없다면 정상 코드 흐름을 읽기 굉장히 까다로움
2. 실무에서는 예외 처리가 더 복잡하기에 더 까다로워짐
-> 따라서 예외 처리 매커니즘이 존재

예외 처리 키워드
try, catch, finally, throw, throws

throw 예외 - 새로운 예외 발생, 예외 객체를 new로 생성 후 발생시킴
throws 예외 - 발생시킨 예외를 메소드 밖으로 던질 때 사용
!둘이 용법이 다르다.

try {
    정상 흐름
} catch () {
    예외 흐름
} finally {
    반도시 호출되는 마무리 흐름
}

try에 진입 시 finally는 무조건 호출
try ~ catch에서 못 잡는 예외 발생 시에도 finally는 무조건 호출
finally 블록이 끝나고 나서 예외가 밖으로 던져짐

                       예외 계층
                        Object
                       Throwable
             Exception                          Error
SQLException IOException RuntimeException    OutOfMemoryError
           (NullPointerException IllegalArgumentException)

Object - 기본형을 제외한 모든 것은 객체, 예외도 객체
Throwable - 최상위 예외, 잡지 말것
Error - 시스템 예외, 복구 불가능 예외, 잡지 말아야 함
Exception
- Checked 예외, 앱 로직에서 사용 가능한 실직적 최상위 예외
- Exception 포함 하위 예외는 컴파일러가 체크하는 Checked 예외
- 단, RuntimeException은 체크 안함
RuntimeException
- Unchecked 예외, 런타임 예외, 컴파일러가 체크하지 않음
- RuntimeException 포함 하위 예외는 모두 Unchecked 예외
- 보통 런타임 예외라고 부름

!주의!
- 상위 예외를 catch 하면 하위 예외까지 모두 잡음
- 앱 로직에서 Throwable을 잡으면 Error 예외까지 잡아 버림
- 따라서 Exception 예외 부터 필요한 예외라고 생각

Checked 예외
- 반드시 개발자가 명시적으로 처리
- 안하면 컴파일 오류
- 반드시 throws를 선언해야 함
- 장점: 컴파일에서 문제 파악 가능
- 단점:

Unchecked 예외
- 개발자가 명시적으로 처리할 필요 없음
- throws 지정할 선언 생략 가능

예외 처리 기본 규칙
- 폭탄 돌리기와 유사
- 예외가 발생하면 잡아서 처리하거나, 밖으로 던져야 함
- 지정한 예외뿐만 아니라 예외의 자식까지 모두 처리 가능
- 예외 처리하지 못하고 계속 던져 main() 밖으로 던지면
  예외 정보와 Stack Trace 출력 함

예외 클래스
- Exception을 상속받은 예외는 Checked 예외가 됨.
- RuntimeException을 상속받으면 Unchecked 예외가 됨.

예외가 제공하는 기본 기능 중 오류 메시지 보관 기능이 있다.
super(massage)로 전달한 메시지는 Throwable.detailMessage에 보관
getMessage()로 조회 가능

예외 계층화
예외 잡기에 유연성을 더할 수 있음
= 예외도 객체기에 부모 예외를 잡아 모든 예외를 처리하거나
  자식 예외만 잡아 개별 처리가 가능하다

Try-with-Resources
- try에서 외부 자원을 사용하고 try가 끝나면 외부 자원을 반납하는 패턴
- 워낙 자주 쓰기에 자바 7에서 편의 기능으로 도입
- 인터페이스를 구현하여 try가 끝나면 자동으로 외부 자원을 반납한다.
try (Resource resource = new Resource()) {
    // Do Something...
}
- try() 안에 자원은 블럭이 끝나는 순간 AutoCloseable.close() 호출 후 자원 해제
- catch나 finally 블럭과는 무관하게 실행

