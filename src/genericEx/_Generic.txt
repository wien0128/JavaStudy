###제네릭###

class Generic<T> {
    Generic<T> a = new Generic<>();
}

- T는 타입 매개변수
- 생성 시점에 <원하는 타입> 지정
- 한 번 타입이 정해지면 Type-Safe 함
- new Generic<>()로 타입 추론도 가능
- 타입 추론 후 컴파일러는 타입 정보를 기반으로 코드 가정 후 반영
- 사용하는 생성 시점에 내부에서 타입을 결정하는 것
- !사용할 타입을 미리 결정하지 않는다는 점이 핵심!
- 코드 재사용과 타입 안정성을 챙길 수 있음

1. 메소드는 매개변수에 인자를 전달해서 사용할 값을 결정
2. 제네릭 클래스는 타입 매개변수에 타입 인자를 전달해 타입을 결정

제네릭 타입
- 클래스 or 인터페이스 정의할 때 타입 매개변수를 쓰는 것
- class Generic<T> { ... }

타입 매개변수
- 제네릭 타입이나 메소드에 사용되는 변수, 실제 타입으로 대체
- Generic<T>, T가 타입 매개변수

타입 인자
- ! 타입 인자로 primitive type(int, double) 사용 불가 !
- 제네릭 타입을 사용할 때 제공되는 실제 타입
- String, Integer, Double, etc.

제네릭 메소드
= public static <T> void printArray(T[] arr) { ... }
- 타입에 상관없이 모든 배열 출력 가능
- 호출하는 시점에 타입 인자를 전달해 타입을 지정함
- 명시적으로 타입을 지정하면서 메서드 호출, 타입 추론도 가능
주의 - 제네릭 클래스 타입은 static 메서드의 타입 매개변수를 사용 불가
    - static 메서드는 인스턴스 단위가 아닌 클래스 단위로 동작
    - 때문에, 타입과는 무관함, static 메서드에 제네릭을 도입하려면
    - 제네릭 메서드를 사용해야 함.
    class Box<T> {
        T instanceMethod(T t) {} - 가능
        static T staticMethod(T t) {} - 불가능
    }
- 제네릭 타입과 마찬가지로 타입 매개변수 제한 가능
    public static <T extends Number> T numberMethod(T t) { ... }

제네릭 타입 vs 제네릭 메소드
- 제네릭 타입 보다 제네릭 메소드가 우선순위가 더 높다.

제네릭 인터페이스
= public interface Comparable<T> {
    int compareTo(T o);
}
- 위와 같이 다양한 타입 객체 비교 가능

와일드카드
- 제네릭 타입의 불확정성을 다루기 위해 사용
- 컴파일 시점에 타입 체크를 통해 런타임 예외를 방지함. (타입 안정성)
- !와일드카드는 이미 만들어진 제네릭 타입을 활용할 때 씀!
- 제네릭 메서드 혹은 타입이 필요한 상황이면 <T>
- 그렇지 않으면 와일드카드 사용
- ? = 제한 없는 와일드 카드
    List<?>, 어떤 타입의 객체든 담을 수 있음
- ? extends Type = 상한 제한 와일드카드
    List<? extends Number>, Number 혹은 그 자식 클래스의 객체만 담을 수 있음.
- ? super Type = 하한 제한 와일드카드
    List<? super Integer>, Integer 혹은 그 부모 클래스 객체만 담을 수 있음.

제네릭 명명 관례
E - Element
K - Key
N - Number
T - Type
V - Value
S, U, V, etc. - 2nd, 3rd, 4th types

Raw Type (쓰지 말것, 알고만 있길) or 원시 타입
= GenericBox integerBox = new Generic();
- 위와 같이 <> 없이 사용하는 것
- 내부의 타입 매개변수가 Object로 들어감, 쓰지 말것
- 하위 호환을 위해 존재함. C++의 struct 같은 건가?

제네릭 타입 매개변수 제한
public class Generic<T extends Animal> { ... }
- 타입 매개변수 T는 Animal과 그 자식 타입만 받을 수 있음
- 즉, T의 상한은 Animal이다.
- 따라서, 컴파일러는 T에 들어올 타입의 범위를 예측 가능해짐
- 타입 안정성과 코드 재사용성을 증대시킴

Type Erasure
- 제네릭이 런타임이 아닌 컴파일 타임에만 존재하게 만드는 메커니즘
- 제네릭 타입 정보는 컴파일 시에만 사용 후 제거되어 원시 타입으로 대체
- 이 덕에 제네릭 이전의 코드와 호환성 유지 가능
1. 제네릭 타입 제거
    - List<String> -> 컴파일 -> List
2. 바운드 타입 대체
    - <T extends Number> -> 컴파일 -> Number
3. Bridge Method 생성
    - 제네릭 타입을 사용하여 오버라이딩된 메소드가 있을 경우
    - 컴파일러는 브리지 메소드 생성 후 런타임 다형성을 유지
    class MyClass<T> { T get(); }
    class MySubClass extends MyClass<String> { String get(); } - 브리지 메소드 생성