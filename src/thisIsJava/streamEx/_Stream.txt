Stream

• Java 8 부터 도입된 컬렉션 및 배열의 반복 처리를 위해 도입
• Stream 은 Iterator 와 유사하지만 다르다.
1. 내부 반복자이므로 처리가 빠르고 병렬처리에 유리
2. 람다식으로 다양한 요소 처리 가능
3. 중간 처리와 최종 처리를 수행하도록 파이프 라인 구축 가능

• 외부 반복자
- for 문과 Iterator 처럼 컬렉션의 요소를 바깥쪽으로 끌고 와 처리하는 것
- 요소를 외부로 가져오는 코드와 외부 처리 코드 모두 가지고 있어야 함
- 반복의 순서, 조건, 중단 등 프로그래머가 직접 제어
- 반복 코드가 명시적으로 보임
- 복잡한 반복 조건을 적용 가능, 중간에 중단하거나 등 유연함
- 컬렉션의 요소에 접근하는 방식이 명확, 반복의 상태를 개발자가 직접 관리

• 내부 반복자
- 요소 처리 방법(람다식)을 컬렉션 내부에 주입하여 요소를 반복 처리하는 것
- 데이터 처리 코드(람다식)만 가진 후 주입하여 처리
- 멀티 코어 CPU 를 활용하기에 유리, 병렬 처리에 유리
- 함수형 스타일) 컬렉션을 어떻게 반복할지 보다 어떤 작업을 할지만 명시
- 코드가 간결하며 반복 제어 흐름에 대한 코드가 노출되지 않음
- 지연 평가를 통해 성능 최적화

• 중간 처리와 최종 처리
Stream 은 하나 이상 연결될 수 있음.
{ 컬렉션/배열 - [오리지널 스트림] - [필터링 중간 스트림] - [매핑 중간 스트림] - 집계 처리 - 결과 }
중간 처리에서는 필터링, 매핑, 정렬 등을 수행
최종 처리에서는 반복, 집계(카운팅, 총합, 평균) 수행

• java.util.stream - Stream Interface, 리소스로부터 스트림 얻기
[BaseStream] <- [Stream], [IntStream], [LongStream], [DoubleStream]
BaseStream: 최상위 부모 인터페이스, 모든 스트림에서 사용 가능한 공통 메소드 정의
Int/Long/DoubleStream: 각각 기본 타입 처리를 위한 스트림
